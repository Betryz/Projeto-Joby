// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {

  id        Int       @id @default(autoincrement())
  public_id String    @unique @default(uuid())
  name      String    @db.VarChar(100)
  email     String    @unique(map: "email") @db.VarChar(255)
  pass      String    @db.VarChar(255)
  avatar    String?   @db.VarChar(700)
  session   session[]
  reviews   reviews[]
  watchlist watchlist[]
}

model movie {
  id           Int         @id @default(autoincrement())
  tmdb_id      Int         @unique
  title        String
  poster_path  String?
  sinopse      String?
  release_date DateTime?
  reviews      reviews[]
  watchlist    watchlist[]
}

model reviews {
  id        Int      @id @default(autoincrement())
  comment   String   @db.Text
  rating    Int
  createdAt DateTime @default(now())
  user_id   Int
  user      user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  movie     movie?   @relation(fields: [movieId], references: [id])
  movieId   Int?
}

model watchlist {
  id       Int     @id @default(autoincrement())
  user_id  Int
  movie_id Int
  watched  Boolean @default(false)
  user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  movie    movie   @relation(fields: [movie_id], references: [id], onDelete: Cascade)
}

model session {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(700)
  update_at DateTime @updatedAt
  user_id   Int
  user      user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

